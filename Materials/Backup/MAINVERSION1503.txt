
	// CODE RICCARDO DONATO
	/////////////////////////////////////////////////////
	// Create a txt file with the eleborated data
	ofstream out_transform("prev_to_cur_transformation.txt");
	ofstream out_trajectory("trajectory.txt");

	//Open video file and return 0 if the file don't exist
	VideoCapture cap;
	cap.open("22.mp4");
	if (!cap.isOpened())
		return 0;

	//Create a Matrix that will be contain one frame of the video
	Mat cur, cur_grey;
	Mat prev, prev_grey;

	cap >> cur;

	Mat traj(Size(cur.cols, cur.rows), CV_8UC3, Scalar(0, 0, 0));

	//Gain constant for correct the magnetude of the arrows and the space of the grid
	int gain_dis = 10;
	float gain_tra = .5;
	int gain_sm = 10;
	int dist = 50;

	//Point that will contain the coordinate of the arrows
	Point pt2, pt3, pt3prev, pt4, pt2_fore, pt4_fore;
	Point center;

	center.x = cur.cols / 2;
	center.y = cur.rows / 2;

	//Setting the trajectory starting from the middle of image and normalized with the gain constant
	double x = traj.cols / 2 + traj.cols*gain_tra;
	double y = traj.rows / 2 + traj.rows*gain_tra;

	//Enable the record of the output video and the trajectory video
	VideoWriter recordOutput("../Output.avi", CV_FOURCC('D', 'I', 'V', 'X'), 30, cur.size(), true);
	//VideoWriter recordTraj("../Trajectory.avi", CV_FOURCC('D', 'I', 'V', 'X'), 30, cur.size(), true);

	if (!recordOutput.isOpened())
		return -1;

	//if (!recordTraj.isOpened())
		//return -1;

	cap >> prev;
		//Convert the original video in to grayscale video
	cvtColor(prev, prev_grey, COLOR_BGR2GRAY);
	// Now I get previous to current frame transformation for all frames
	vector <TransformParam> prev_to_cur_transform, prev_to_cur_transform_fore;

	int k = 1;
	int max_frames = cap.get(CV_CAP_PROP_FRAME_COUNT);
	Mat last_T, last_T_fore;
	Detector det;
	vector<float> average_prev;
	vector<Point2f> buffer;
	while (true) {
		cap >> cur;

		//Draw a grid
		traj = Scalar(0, 0, 0);
		int width = traj.size().width;
		int height = traj.size().height;

		for (int i = 0; i < height; i += dist)
			line(traj, Point(0, i), Point(width, i), cv::Scalar(255, 255, 255));

		for (int i = 0; i < width; i += dist)
			line(traj, Point(i, 0), Point(i, height), cv::Scalar(255, 255, 255));

		if (cur.data == NULL) {
			break;
		}

		cvtColor(cur, cur_grey, COLOR_BGR2GRAY);
		//cvtColor(prev, prev_grey, COLOR_BGR2GRAY);
		//Now I define the vectors that will be contain the good feature points of current end previus frame, the status and error of optical flow
		vector <Point2f> prev_corner, cur_corner;
		vector <Point2f> prev_corner2, cur_corner2;
		vector <uchar> status;
		vector <float> err;
		//Mat edges;
		//Canny(cur, cur, 200.0, 10.0);

		//imshow("edg", edges);
		/*
		Mat structuEle5x5 = getStructuringElement(MORPH_RECT, Size(5, 5));
		GaussianBlur(prev_grey, prev_grey, Size(3, 3), 3);
		//threshold(prev_grey, prev_grey, 120, 255.0, 3);
		GaussianBlur(cur_grey, cur_grey, Size(3, 3), 3);
		//
		//threshold(cur_grey, cur_grey, 120, 255.0, 3);
		
		cvtColor(cur, cur_grey, COLOR_BGR2YUV);
		cvtColor(prev, prev_grey, COLOR_BGR2YUV);
		vector<Mat> channelsCur;
		vector<Mat> channelsPrev;
		split(cur_grey, channelsCur);
		split(prev_grey, channelsPrev);

		equalizeHist(channelsCur[0], channelsCur[0]);
		equalizeHist(channelsPrev[0], channelsPrev[0]);


		cvtColor(cur_grey, cur_grey, COLOR_YUV2BGR);
		cvtColor(prev_grey, prev_grey, COLOR_YUV2BGR);

		cvtColor(cur_grey, cur_grey, COLOR_BGR2GRAY);
		cvtColor(prev_grey, prev_grey, COLOR_BGR2GRAY);

		//erode(cur_grey, cur_grey, structuEle5x5);
		//erode(prev_grey, prev_grey, structuEle5x5);
		imshow("Output", cur_grey);
		waitKey(1500);

		*/
		//Canny(cur_grey, cur_grey, 100, 200, 3);
		//Canny(prev_grey, prev_grey, 100, 200, 3);
		goodFeaturesToTrack(prev_grey, prev_corner, 500, 0.01, 30);  //Detect the good feature points. I pass the max number of point to return, the quality threshold and the max euclidean distance between two points
		
		for (int i = 0; i < size(prev_corner); i++) {
			drawMarker(cur, Point(prev_corner.at(i).x, prev_corner.at(i).y), Scalar(255, 255, 255));
		}

		calcOpticalFlowPyrLK(prev_grey, cur_grey, prev_corner, cur_corner, status, err);	//Compute the optical flow

		// I read all value returned by optial flow function and if the status is setted to false, I discard this value
		for (size_t i = 0; i < status.size(); i++) {
			if (status[i]) {
				prev_corner2.push_back(prev_corner[i]);
				cur_corner2.push_back(cur_corner[i]);

				/*
				float dist = abs(euclideanDist(cur_corner2[i], prev_corner2[i]) - euclideanDistP(center, pt2));
				if (dist >= 12)
				{
					drawArrow(cur, prev_corner2[i], cur_corner2[i], Scalar(0, 0, 255), 9, 2, 8, 0);	// Blue
				}
				else {
					drawArrow(cur, prev_corner2[i], cur_corner2[i], Scalar(255, 0, 0), 9, 2, 8, 0); // Red
				}*/

			}
		}



		//Compute the translation plus rotation of my 2D points
		Mat T = estimateRigidTransform(prev_corner2, cur_corner2, false);

		//In rare cases no transform is found. We'll just use the last known good transform.
		if (T.data == NULL) {
			last_T.copyTo(T);
		}

		T.copyTo(last_T);

		//Extract dx and dy from trasformation matrix
		double dx = T.at<double>(0, 2);
		double dy = T.at<double>(1, 2);
		float threshold = sqrt(dx*dx + dy * dy);
		prev_to_cur_transform.push_back(TransformParam(dx, dy));

		out_transform << k << " " << dx << " " << dy << " " << threshold << endl;	//Write in txt file

		cur.copyTo(prev);
		cur_grey.copyTo(prev_grey);

		cout << "Frame: " << k << "/" << max_frames << " - good optical flow: " << prev_corner2.size() << endl;	//Output on console

		vector <TransformParam> smoothed_displacement;

		//Performing the averaging window for smoothing the result of displace
		for (size_t i = 0; i < prev_to_cur_transform.size(); i++)
		{
			double sum_x = 0;
			double sum_y = 0;
			int count = 0;

			for (int j = -SMOOTHING_VAL; j <= SMOOTHING_VAL; j++) {
				if (i + j >= 0 && i + j < prev_to_cur_transform.size()) {
					sum_x += prev_to_cur_transform[i + j].dx;
					sum_y += prev_to_cur_transform[i + j].dy;

					count++;
				}
			}

			double avg_x = sum_x / count;
			double avg_y = sum_y / count;

			smoothed_displacement.push_back(TransformParam(avg_x, avg_y));

			//Assign the vaule of x and y in a point moltiplied by a gain factor 
			pt2.x = center.x + (-dx * gain_dis);
			pt2.y = center.y + (-dy * gain_dis);

			pt4.x = center.x + (-avg_x * gain_sm);
			pt4.y = center.y + (-avg_y * gain_sm);
		}

		//Now i extimate the trajectory with an incremental variable that add/subtract his status every iteration with the average flow value. 
		vector <Trajectory> trajectory;
		x -= (center.x - pt4.x) / gain_sm;
		y -= (center.y - pt4.y) / gain_sm;

		trajectory.push_back(Trajectory(x, y));

		out_trajectory << (k + 1) << " " << x << " " << y << endl;



		pt3.x = (x*gain_tra);
		pt3.y = (y*gain_tra);

		pt3prev.x = pt3.x + (dx*gain_tra);
		pt3prev.y = pt3.y + (dy*gain_tra);

		drawArrow(cur, center, pt2, Scalar(0, 0, 255), 9, 2, 8, 0);		//Draw displacement
		drawArrow(cur, center, pt4, Scalar(255, 0, 0), 9, 4, 8, 0);		//Draw displacement smooth
		drawArrow(traj, pt3prev, pt3, Scalar(0, 0, 255), 9, 3, 8, 0);	//Draw the trajectory

		vector<float> all_dist;
		vector<Point2f> dist_comp;
		for (size_t i = 0; i < cur_corner2.size(); i++) {
			all_dist.push_back(euclideanDist(cur_corner2[i], prev_corner2[i]));
			//out_transform << k << " " << cur_corner2[i].x-prev_corner2[i].x << "<-dx  " << cur_corner2[i].y-prev_corner2[i].y << "<-dy " << endl;	//Write in txt file
			dist_comp.push_back(Point2f(abs(cur_corner2[i].x - prev_corner2[i].x), abs(cur_corner2[i].y - prev_corner2[i].y)));
		}

		/*
		// 0 = x, 1 = y
		float max = 0.0;
		int min = 0;

		if (dx >= dy) {
			max = dx;
			min = 0;
		}
		else {
			max = dy;
			min = 1;
		}
		vector<Point2f> background, foreground_cur, foreground_prev;

		for (size_t i = 0; i < dist_comp.size(); i++) {
			if (min = 0) {
				if (max >= dist_comp[i].x + threshold/3) {
					background.push_back(cur_corner2[i]);
				}
				else {
					foreground_cur.push_back(cur_corner2[i]);
					foreground_prev.push_back(prev_corner2[i]);
				}
			}
			else {
				if (max >= dist_comp[i].y + threshold / 3) {
					background.push_back(cur_corner2[i]);
				}
				else {
					foreground_cur.push_back(cur_corner2[i]);
					foreground_prev.push_back(prev_corner2[i]);
				}
			}

		}

		for (size_t i = 0; i < foreground_cur.size(); i++) {
			drawArrow(cur, foreground_prev[i], foreground_cur[i], Scalar(0, 0, 255), 9, 2, 8, 0);
		}

		*/


		/////////////////////////////////////////////////////////////////////

		vector<int> my_mode;
		my_mode = mode(all_dist);

		cout << "LA MODA: " << my_mode[0] << " - " << my_mode[1] << endl;
		out_transform << k << " " << my_mode[0] << " " << my_mode[1] << endl;	//Write in txt file
		k++;


		// 0 = mode[0], 1 = mode[1]
		float max = 0.0;
		float min = 0.0;
		float offset = abs(my_mode[1] - my_mode[0]);

		if (offset >= 4) {
			offset = 3;
		}
		else {
			offset = offset * 2.5; //*2
		}

		cout << "offset:" << offset << endl;
		/*if (offset >= 3) {
			my_mode.at(1) = 0;
			max = my_mode[0];
			min = max;
		}
		else {

			if (my_mode[0] >= my_mode[1]) {
				max = my_mode[0];
				min = my_mode[1];
			}
			else {
				max = my_mode[1];
				min = my_mode[0];
			}
		}

		if (threshold < min) {
			offset = max + threshold;
			cout << k << "111" << endl;
		}
		else {
			if (threshold > min && threshold < max) {
				offset = max + threshold * (1 - min / max);
				cout << k << "222" << endl;
			}
			else {
				offset = max + (threshold - max) * (1 - min / max);
				cout << k << "333" << endl;
			}
		}
		*/



		float sum = 0;

		for (size_t i = 0; i < cur_corner2.size(); i++) {
			sum = sum + all_dist[i];
		}
		float average_cur = sum / all_dist.size();
		average_prev.push_back(average_cur);

		float new_sum = 0;

		for (size_t i = 0; i < average_prev.size(); i++) {
			new_sum = new_sum + average_prev[i];
		}
		float new_average = new_sum / average_prev.size();


		//	SCOMMENTA
		vector<Point2f> background, foreground_cur, foreground_prev;
		//float threshold = sqrt(dx*dx + dy*dy);//euclideanDistP(center, pt4);


		cout << offset << endl;
		for (size_t i = 0; i < all_dist.size(); i++)
		{
			if (all_dist[i] <= (my_mode[0] + offset) && all_dist[i] >= (my_mode[0] - offset)) {
				//if (all_dist[i] <= (my_mode[0] + offset) && all_dist[i] >= (my_mode[0] - offset)) {
				background.push_back(cur_corner2[i]);
			}
			else {
				foreground_cur.push_back(cur_corner2[i]);
				foreground_prev.push_back(prev_corner2[i]);

			}
			/*
			if (abs(all_dist[i] - new_average) < (2 + threshold)) {
				background.push_back(cur_corner2[i]);
			}
			else {
				foreground_cur.push_back(cur_corner2[i]);
				foreground_prev.push_back(prev_corner2[i]);
			}
			*/

		}
		float sum_fore = 0;

		for (size_t i = 0; i < foreground_cur.size(); i++) {
			float dist_fore = euclideanDist(foreground_cur[i], foreground_prev[i]);

			sum_fore = sum_fore + dist_fore;
		}

		float average_fore = sum_fore / foreground_cur.size();

		for (size_t i = 0; i < foreground_cur.size(); i++) {
			if (euclideanDist(foreground_cur[i], foreground_prev[i]) > 2 * average_fore) {
				foreground_cur.erase(foreground_cur.begin() + i);
				foreground_prev.erase(foreground_prev.begin() + i);
			}
		}

		vector<float> fore_xAxis;
		for (int i = 0; i < foreground_cur.size(); i++) {
			fore_xAxis.push_back(foreground_cur[i].x);
		}
		if (k == 13) {
			int iiii = 0;
		}
		/* // SOLO PER 1 PERSONA
		vector<int> my_mode_xaxis;
		my_mode_xaxis = mode(fore_xAxis);
		drawMarker(cur, Point(my_mode_xaxis[0], cur.rows/2), Scalar(0, 0, 255));

		cout << "frame: " << k << endl;
		for (size_t i = 0; i < foreground_cur.size(); i++) {
			if (abs(my_mode_xaxis[0] - fore_xAxis[i]) > abs(my_mode_xaxis[0] - (cur.cols)/5)) {
				foreground_cur.erase(foreground_cur.begin() + i);
				foreground_prev.erase(foreground_prev.begin() + i);

				fore_xAxis.erase(fore_xAxis.begin() + i);
			}
		}
		*/

		
		for (size_t i = 0; i < foreground_cur.size(); i++) {
			drawArrow(cur, foreground_prev[i], foreground_cur[i], Scalar(0, 0, 255), 9, 2, 8, 0);
		}
		//drawDisplacement(cur, foreground_cur, foreground_prev, all_dist);

		
		/////////////////////////////////////////////////////////////////////////////////////
		/*Point2f center_fore;
		float Xmax = foreground_cur[0].x;
		float Xmin = foreground_cur[0].x;
		float Ymax = foreground_cur[0].y;
		float Ymin = foreground_cur[0].y;

		for (size_t i = 1; i < foreground_cur.size(); i++) {

			if (foreground_cur[i].x >= Xmax) {
				Xmax = foreground_cur[i].x;
			}
			if (foreground_cur[i].x <= Xmin) {
				Xmin = foreground_cur[i].x;
			}
			if (foreground_cur[i].y >= Ymax) {
				Ymax = foreground_cur[i].y;
			}
			if (foreground_cur[i].y <= Ymin) {
				Ymin = foreground_cur[i].y;
			}
		}

		center_fore = Point2f((Xmax + Xmin) / 2, (Ymax + Ymin) / 2);
		*/
		/*
		for (int i = 0; i < foreground_cur.size(); i++) {
			if (foreground_cur[i].y > ((Ymax + Ymin) / 2 + (Ymax + Ymin) / 2)) {
				foreground_cur.erase(foreground_cur.begin() + i);
				foreground_prev.erase(foreground_prev.begin() + i);
			}
		}

		rectangle(cur, Point2f(Xmin - Xmin/12, Ymin - Ymin/4), Point2f(Xmax + Xmin/12, Ymax + Ymin/4), Scalar(255, 255, 255));

		*/
		/*
		//Compute the translation plus rotation of my 2D points
		Mat T_fore = estimateRigidTransform(foreground_prev, foreground_cur, false);

		//In rare cases no transform is found. We'll just use the last known good transform.
		if (T_fore.data == NULL) {
			last_T_fore.copyTo(T_fore);
		}

		T_fore.copyTo(last_T_fore);

		//Extract dx and dy from trasformation matrix
		double dx_fore = T_fore.at<double>(0, 2);
		double dy_fore = T_fore.at<double>(1, 2);

		prev_to_cur_transform_fore.push_back(TransformParam(dx_fore, dy_fore));

		out_transform << k << " " << dx_fore << " " << dy_fore << endl;	//Write in txt file

		//cur.copyTo(prev);
		//cur_grey.copyTo(prev_grey);

		//cout << "Frame: " << k << "/" << max_frames << " - good optical flow: " << prev_corner2.size() << endl;	//Output on console



		vector <TransformParam> smoothed_displacement_fore;

		//Performing the averaging window for smoothing the result of displace
		for (size_t i = 0; i < prev_to_cur_transform_fore.size(); i++)
		{
			double sum_x = 0;
			double sum_y = 0;
			int count = 0;

			for (int j = -SMOOTHING_VAL; j <= SMOOTHING_VAL; j++) {
				if (i + j >= 0 && i + j < prev_to_cur_transform.size()) {
					sum_x += prev_to_cur_transform_fore[i + j].dx;
					sum_y += prev_to_cur_transform_fore[i + j].dy;

					count++;
				}
			}

			double avg_x = sum_x / count;
			double avg_y = sum_y / count;

			smoothed_displacement_fore.push_back(TransformParam(avg_x, avg_y));

			//Assign the vaule of x and y in a point moltiplied by a gain factor
			pt2_fore.x = center_fore.x + (dx_fore); //* gain_dis);
			pt2_fore.y = center_fore.y + (dy_fore);// *gain_dis);

			pt4_fore.x = center_fore.x + (avg_x);// *gain_sm);
			pt4_fore.y = center_fore.y + (avg_y);// *gain_sm);
		}
		
		//Now i extimate the trajectory with an incremental variable that add/subtract his status every iteration with the average flow value.
		vector <Trajectory> trajectory;
		x -= (center.x - pt4.x) / gain_sm;
		y -= (center.y - pt4.y) / gain_sm;

		trajectory.push_back(Trajectory(x, y));

		out_trajectory << (k + 1) << " " << x << " " << y << endl;

		k++;

		pt3.x = (x*gain_tra);
		pt3.y = (y*gain_tra);

		pt3prev.x = pt3.x + (dx*gain_tra);
		pt3prev.y = pt3.y + (dy*gain_tra);
		*/
		//drawArrow(cur, center_fore, pt2_fore, Scalar(0, 0, 255), 9, 2, 8, 0);		//Draw displacement
		//drawArrow(cur, center_fore, pt4_fore, Scalar(255, 0, 0), 9, 4, 8, 0);		//Draw displacement smooth
		







		/*

		vector<Rect> rect_founded = det.detect(cur_grey);
		vector<Rect> rect_final;
		
		Mat people_box_grey;
		Mat last_T_box;
		Mat prev_Pbox, prev_Pbox_grey;

		Rect &rect_filt_1 = *rect_founded.begin();
		det.adjustRect(rect_filt_1);
		rectangle(cur, rect_filt_1.tl(), rect_filt_1.br(), cv::Scalar(0, 255, 0), 2);
		prev_Pbox = cur(rect_filt_1);
		cvtColor(prev_Pbox, prev_Pbox_grey, COLOR_BGR2GRAY);
		

		
		for (vector<Rect>::iterator i = rect_founded.begin() + 1; i != rect_founded.end(); ++i)
		{
			Rect &rect_filt = *i;
			det.adjustRect(rect_filt);
			rect_final.push_back(rect_filt);
			rectangle(cur, rect_filt.tl(), rect_filt.br(), cv::Scalar(0, 255, 0), 2);
		}
		*/
		/*
		vector<Point2f> belonging_features;
		for (size_t i = 0; i < rect_final.size(); i++) {

			for (size_t j = 0; j < cur_corner2.size(); j++) {
				if (isContained(cur_corner2[j], rect_final[i]) == true) {
					belonging_features.push_back(cur_corner2[j]);
				}

			}

			for (int j = 0; j < size(belonging_features); j++) {
				drawMarker(cur, Point(belonging_features.at(j).x, belonging_features.at(j).y), Scalar(0, 0, 255));
			}
			belonging_features.clear();
		}
		
		*/



		/*
		//Now I define the vectors that will be contain the good feature points of current end previus frame, the status and error of optical flow
		vector <Point2f> prev_corner_Pbox, cur_corner_Pbox;
		vector <Point2f> prev_corner2_Pbox, cur_corner2_Pbox;
		vector <uchar> status_box;
		vector <float> err_box;

		Mat people_box = cur(rect_filt);
		cvtColor(people_box, people_box_grey, COLOR_BGR2GRAY);


		goodFeaturesToTrack(prev_Pbox_grey, prev_corner_Pbox, 200, 0.3, 15);  //Detect the good feature points. I pass the max number of point to return, the quality threshold and the max euclidean distance between two points
		for (int j = 0; j < size(prev_corner_Pbox); j++) {
			drawMarker(people_box, Point(prev_corner_Pbox.at(j).x, prev_corner_Pbox.at(j).y), Scalar(0, 0, 255));
		}
		imwrite("rect1.jpg", people_box);
		calcOpticalFlowPyrLK(prev_Pbox_grey, people_box_grey, prev_corner_Pbox, cur_corner_Pbox, status_box, err_box);	//Compute the optical flow

	// I read all value returned by optial flow function and if the status is setted to false, I discard this value
		for (size_t j = 0; j < status.size(); j++) {
			if (status_box[j]) {
				prev_corner2_Pbox.push_back(prev_corner_Pbox[j]);
				cur_corner2_Pbox.push_back(cur_corner_Pbox[j]);
			}
		}

		//Compute the translation plus rotation of my 2D points
		Mat T_box = estimateRigidTransform(prev_corner2_Pbox, cur_corner2_Pbox, false);

		//In rare cases no transform is found. We'll just use the last known good transform.
		if (T_box.data == NULL) {
			last_T_box.copyTo(T_box);
		}

		T_box.copyTo(last_T_box);

		//Extract dx and dy from trasformation matrix
		double dx = T_box.at<double>(0, 2);
		double dy = T_box.at<double>(1, 2);

		prev_to_cur_transform.push_back(TransformParam(dx, dy));

		out_transform << k << " " << dx << " " << dy << endl;	//Write in txt file

		people_box.copyTo(prev_Pbox);
		people_box_grey.copyTo(prev_Pbox_grey);


		imshow("Output", people_box);

		*/



















		//Saving the output videos
		recordOutput << cur;
		//recordTraj << traj;

		//Display the output videos
		imshow("Output", cur);
		//imshow("Path", traj);
		waitKey(30);
	}
	return 0;